{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/novok/repos/ads/lib/auth.ts"],"sourcesContent":["import bcrypt from 'bcrypt';\r\n\r\nexport async function hashPassword(password: string) {\r\n    return await bcrypt.hash(password, 10);\r\n}\r\n\r\nexport async function comparePasswords(password: string, hash: string) {\r\n    return await bcrypt.compare(password, hash);\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;AAEO,eAAe,aAAa,QAAgB;IAC/C,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,IAAI,CAAC,UAAU;AACvC;AAEO,eAAe,iBAAiB,QAAgB,EAAE,IAAY;IACjE,OAAO,MAAM,qGAAA,CAAA,UAAM,CAAC,OAAO,CAAC,UAAU;AAC1C","debugId":null}},
    {"offset": {"line": 94, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/novok/repos/ads/lib/jwt.ts"],"sourcesContent":["import { SignJWT, jwtVerify, JWTPayload } from 'jose';\r\n\r\nconst secret = new TextEncoder().encode(process.env.JWT_SECRET);\r\nconst alg = 'HS256';\r\n\r\nexport async function signJwt(payload: Record<string, unknown>, expiresIn = '2h') {\r\n    return await new SignJWT(payload as JWTPayload)\r\n        .setProtectedHeader({ alg: alg })\r\n        .setIssuedAt()\r\n        .setExpirationTime(expiresIn)\r\n        .sign(secret);\r\n}\r\n\r\nexport async function verifyJwt(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, secret);\r\n        return payload;\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU;AAC9D,MAAM,MAAM;AAEL,eAAe,QAAQ,OAAgC,EAAE,YAAY,IAAI;IAC5E,OAAO,MAAM,IAAI,uJAAA,CAAA,UAAO,CAAC,SACpB,kBAAkB,CAAC;QAAE,KAAK;IAAI,GAC9B,WAAW,GACX,iBAAiB,CAAC,WAClB,IAAI,CAAC;AACd;AAEO,eAAe,UAAU,KAAa;IACzC,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QAC3C,OAAO;IACX,EAAE,OAAO,GAAG;QACR,OAAO;IACX;AACJ","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/novok/repos/ads/src/app/api/auth/register/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { hashPassword } from '@/lib/auth';\r\nimport { signJwt } from '@/lib/jwt';\r\nimport { serialize } from 'cookie';\r\nimport { verifyJwt } from '@/lib/jwt';\r\n\r\nconst prisma = new PrismaClient();\r\n\r\nexport async function POST(req: NextRequest) {\r\n\r\n    const token = req.cookies.get('token')?.value;\r\n    const payload = token ? await verifyJwt(token) : null;\r\n\r\n    if (!payload) {\r\n        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    try {\r\n        const body = await req.json();\r\n        const { email, password, name } = body;\r\n\r\n        if (!email || !password) {\r\n            return NextResponse.json({ message: 'Email and password required' }, { status: 400 });\r\n        }\r\n\r\n        const existingUser = await prisma.user.findUnique({ where: { email } });\r\n        if (existingUser) {\r\n            return NextResponse.json({ message: 'User already exists' }, { status: 409 });\r\n        }\r\n\r\n        const hashedPassword = await hashPassword(password);\r\n\r\n        const user = await prisma.user.create({\r\n        data: {\r\n            email,\r\n            password: hashedPassword,\r\n            name,\r\n        },\r\n        });\r\n\r\n        const token = await signJwt({ sub: user.id.toString(), email: user.email });\r\n\r\n        const response = NextResponse.json({\r\n            message: 'User created',\r\n            user: { id: user.id, email: user.email },\r\n        });\r\n\r\n        response.headers.set(\r\n            'Set-Cookie',\r\n            serialize('token', token, {\r\n                httpOnly: true,\r\n                secure: process.env.NODE_ENV === 'production',\r\n                path: '/',\r\n                maxAge: 60 * 60,\r\n                sameSite: 'lax',\r\n            })\r\n        );\r\n\r\n        return response;\r\n    } catch (error) {\r\n        console.error('Registration error:', error);\r\n        return NextResponse.json({ message: 'Something went wrong' }, { status: 500 });\r\n    }\r\n}\r\n"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;;;;;;;AAGA,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY;AAExB,eAAe,KAAK,GAAgB;IAEvC,MAAM,QAAQ,IAAI,OAAO,CAAC,GAAG,CAAC,UAAU;IACxC,MAAM,UAAU,QAAQ,MAAM,CAAA,GAAA,4GAAA,CAAA,YAAS,AAAD,EAAE,SAAS;IAEjD,IAAI,CAAC,SAAS;QACV,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAe,GAAG;YAAE,QAAQ;QAAI;IACxE;IAEA,IAAI;QACA,MAAM,OAAO,MAAM,IAAI,IAAI;QAC3B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAG;QAElC,IAAI,CAAC,SAAS,CAAC,UAAU;YACrB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAA8B,GAAG;gBAAE,QAAQ;YAAI;QACvF;QAEA,MAAM,eAAe,MAAM,OAAO,IAAI,CAAC,UAAU,CAAC;YAAE,OAAO;gBAAE;YAAM;QAAE;QACrE,IAAI,cAAc;YACd,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAE,SAAS;YAAsB,GAAG;gBAAE,QAAQ;YAAI;QAC/E;QAEA,MAAM,iBAAiB,MAAM,CAAA,GAAA,6GAAA,CAAA,eAAY,AAAD,EAAE;QAE1C,MAAM,OAAO,MAAM,OAAO,IAAI,CAAC,MAAM,CAAC;YACtC,MAAM;gBACF;gBACA,UAAU;gBACV;YACJ;QACA;QAEA,MAAM,QAAQ,MAAM,CAAA,GAAA,4GAAA,CAAA,UAAO,AAAD,EAAE;YAAE,KAAK,KAAK,EAAE,CAAC,QAAQ;YAAI,OAAO,KAAK,KAAK;QAAC;QAEzE,MAAM,WAAW,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAC/B,SAAS;YACT,MAAM;gBAAE,IAAI,KAAK,EAAE;gBAAE,OAAO,KAAK,KAAK;YAAC;QAC3C;QAEA,SAAS,OAAO,CAAC,GAAG,CAChB,cACA,CAAA,GAAA,yIAAA,CAAA,YAAS,AAAD,EAAE,SAAS,OAAO;YACtB,UAAU;YACV,QAAQ,oDAAyB;YACjC,MAAM;YACN,QAAQ,KAAK;YACb,UAAU;QACd;QAGJ,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,uBAAuB;QACrC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,SAAS;QAAuB,GAAG;YAAE,QAAQ;QAAI;IAChF;AACJ","debugId":null}}]
}