{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 68, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/novok/repos/ads/lib/jwt.ts"],"sourcesContent":["import { SignJWT, jwtVerify, JWTPayload } from 'jose';\r\n\r\nconst secret = new TextEncoder().encode(process.env.JWT_SECRET);\r\nconst alg = 'HS256';\r\n\r\nexport async function signJwt(payload: Record<string, unknown>, expiresIn = '2h') {\r\n    return await new SignJWT(payload as JWTPayload)\r\n        .setProtectedHeader({ alg: alg })\r\n        .setIssuedAt()\r\n        .setExpirationTime(expiresIn)\r\n        .sign(secret);\r\n}\r\n\r\nexport async function verifyJwt(token: string) {\r\n    try {\r\n        const { payload } = await jwtVerify(token, secret);\r\n        return payload;\r\n    } catch (e) {\r\n        return null;\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM,SAAS,IAAI,cAAc,MAAM,CAAC,QAAQ,GAAG,CAAC,UAAU;AAC9D,MAAM,MAAM;AAEL,eAAe,QAAQ,OAAgC,EAAE,YAAY,IAAI;IAC5E,OAAO,MAAM,IAAI,uJAAA,CAAA,UAAO,CAAC,SACpB,kBAAkB,CAAC;QAAE,KAAK;IAAI,GAC9B,WAAW,GACX,iBAAiB,CAAC,WAClB,IAAI,CAAC;AACd;AAEO,eAAe,UAAU,KAAa;IACzC,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM,CAAA,GAAA,yJAAA,CAAA,YAAS,AAAD,EAAE,OAAO;QAC3C,OAAO;IACX,EAAE,OAAO,GAAG;QACR,OAAO;IACX;AACJ","debugId":null}},
    {"offset": {"line": 96, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/novok/repos/ads/src/app/api/ads/route.ts"],"sourcesContent":["import { NextRequest, NextResponse } from 'next/server';\r\nimport { PrismaClient } from '@prisma/client';\r\nimport { verifyJwt } from '@/lib/jwt';\r\n\r\nconst prisma = new PrismaClient()\r\n\r\nexport async function GET(req: NextRequest) {\r\n    const token = req.cookies.get('token')?.value;\r\n    const payload = token ? await verifyJwt(token) : null;\r\n\r\n    if (!payload) {\r\n        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    try {\r\n        const url = new URL(req.url);\r\n        const categoryId = url.searchParams.get('categoryId');\r\n        const minPrice = url.searchParams.get('minPrice');\r\n        const maxPrice = url.searchParams.get('maxPrice');\r\n        const sortByPrice = url.searchParams.get('sortByPrice');\r\n\r\n        const where: any = {};\r\n\r\n        if (categoryId) {\r\n        const catIdNum = Number(categoryId);\r\n        if (!isNaN(catIdNum)) {\r\n            where.categoryId = catIdNum;\r\n        }\r\n        }\r\n\r\n        if (minPrice || maxPrice) {\r\n        where.price = {};\r\n        if (minPrice) {\r\n            const min = Number(minPrice);\r\n            if (!isNaN(min)) {\r\n            where.price.gte = min;\r\n            }\r\n        }\r\n        if (maxPrice) {\r\n            const max = Number(maxPrice);\r\n            if (!isNaN(max)) {\r\n            where.price.lte = max;\r\n            }\r\n        }\r\n        }\r\n\r\n        const orderBy: any = { date: 'desc' };\r\n\r\n        if (sortByPrice && (sortByPrice === 'asc' || sortByPrice === 'desc')) {\r\n        orderBy.price = sortByPrice;\r\n        delete orderBy.date;\r\n        }\r\n\r\n        const ads = await prisma.ad.findMany({\r\n        where,\r\n        include: {\r\n            author: {\r\n            select: { id: true, email: true },\r\n            },\r\n            category: {\r\n            select: { id: true, name: true },\r\n            },\r\n        },\r\n        orderBy,\r\n        });\r\n\r\n        return NextResponse.json(ads);\r\n    } catch (error) {\r\n        console.error('Failed to fetch ads:', error);\r\n        return NextResponse.json({ message: 'Failed to fetch ads' }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function POST(req: NextRequest) {\r\n    const token = req.cookies.get('token')?.value;\r\n    const payload = token ? await verifyJwt(token) : null;\r\n\r\n    if (!payload) {\r\n        return NextResponse.json({ message: 'Unauthorized' }, { status: 401 });\r\n    }\r\n\r\n    try {\r\n        const body = await req.json();\r\n        const { title, description, categoryId, price } = body;\r\n\r\n        if (!title) {\r\n        return NextResponse.json({ message: 'Title is required' }, { status: 400 });\r\n        }\r\n\r\n        const authorId = Number(payload.sub);\r\n\r\n        if (isNaN(authorId)) {\r\n            return NextResponse.json({ message: 'Invalid author ID in token' }, { status: 400 });\r\n        }\r\n\r\n        if (categoryId !== undefined && categoryId !== null) {\r\n            const categoryExists = await prisma.category.findUnique({\r\n                where: { id: categoryId },\r\n                select: { id: true },\r\n            });\r\n\r\n            if (!categoryExists) {\r\n                return NextResponse.json({ message: 'Category not found' }, { status: 400 });\r\n            }\r\n        }\r\n\r\n        const newAd = await prisma.ad.create({\r\n        data: {\r\n            title,\r\n            description: description ?? null,\r\n            categoryId: categoryId ?? null,\r\n            price: price ?? null,\r\n            authorId,\r\n        },\r\n        });\r\n\r\n        return NextResponse.json(newAd, { status: 201 });\r\n    } catch (error) {\r\n        console.error('Failed to create ad:', error);\r\n        return NextResponse.json({ message: 'Failed to create ad' }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":"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","debugId":null}}]
}